# Reference Set: a distinct combination of a reference and desired set of
# chromosomes from said reference.
reference_sets:
  # Each key for this object should be a distinct identifier to be associated
  # with each reference set.
  GRCh37_test:
    # A key denoting the reference to use. For valid keys, see static.yml
    ref: GRCh37

    # A list of chromosomes to include (X = 23, y = 24). Empty list means all
    # chromosomes are included.
    chr_filter: [21]

  GRCh38_test:
    ref: GRCh38
    chr_filter: [21]

# Labeled queries: input vcf files which have an associated benchmark (which
# in turn gives them labels). Note: these may be used for either model traning
# or testing.
labeled_queries:
  # Each key for this object should be unique and briefly convey the intent of
  # this query
  HG002_Hifi_DV:
    # The reference set corresponding to this query vcf. The reference itself
    # should correspond to that which was used to make the vcf itself (or
    # weird stuff will ensue)
    refset: GRCh37_test

    # The chromosome prefix used in this vcf (which is likely the same as the
    # reference and benchmark, but not guaranteed)
    chr_prefix: ""

    # Set to true to split biallelic lines with `bcftools norm --biallelics -`
    # before processing with vcfeval. Note that biallelics cannot be used in the
    # EBM training set since indel length would make no sense, so unsplit
    # biallelics are removed after vcfeval regardless of this flag.
    # Default: false
    split_biallelics: false

    # The location from which to retrieve this query vcf
    src:
      url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/NISTv4.2.1/GRCh37/SupplementaryFiles/inputvcfsandbeds/HG002_GRCh37_1_22_PacBio_HiFi_DeepVariant.vcf.gz

    # The benchmark that should be applied to this vcf to produce labels. For
    # valid keys, see static.yml. It is assumed that the user will make a sane
    # choice here (eg the reference and genome will match)
    benchmark: HG002_v421

    # Additional variables to associated with this particular query (which may
    # may be used as features during model training/testing). In effect, each
    # key value pair here will produce a new column with a single value in the
    # dataframe fed to the model fitting algorithm. This is only useful to distinguish
    # between multiple vcfs when they are concatenated into one traning set. For
    # example, we could use 'coverage' here to distinguish between different
    # vcfs that were created identically except for coverage, and the variable
    # here allows the model to take coverage into account during fitting.
    #
    # NOTE: the keys and value for this must conform to those set in static.yml
    # -> feature_names -> variables
    variables:
      coverage: 40
      seqtech: "PacBio HiFi"
      variant_caller: "DeepVariant"

    # The maximum allowed length in the REF and ALT fields. Both of these
    # default to 50 which will remove structural variants (by de facto
    # definition)
    # max_ref: 50
    # max_alt: 50

    # The fields from the FORMAT column to parse from the vcf file. This is a
    # dictionary mapping whose keys are are string (which will become the
    # feature that can be referenced in the model, and the value is one of:
    # - a null value, which will create a feature of entirly missing values
    # - a string value, which will create a feature with just that string
    # - a mapping like {field_name: str, field_missing: str | None} which will
    #   parse the corresponding SAMPLE field matching the FORMAT column field
    #   whose name matches 'field_name'. Any lines without 'field_name' will
    #   be filled with 'field_missing' if supplied.
    #
    # Default: {} (eg parse no FORMAT fields)
    #
    # format_fields: {}

    # Corrections to apply to this VCF file
    corrections:
      # Remove the given format fields; this is sometimes necessary to keep
      # hap.py happy. Obviously, these fields cannot be used to create features.
      #
      # Default: []
      # strip_format_fields: []

      # Fix refcall genotype. In the case of DV VCFs (and likely others) hap.py
      # will complain if the genotype field is ./. or 0/0 instead of 0/1.
      # Enable this flag to make this correction.
      fix_refcall_gt : true

  HG002_Illumina_DV:
    refset: GRCh38_test
    chr_prefix: chr
    src:
      url: https://storage.googleapis.com/brain-genomics-public/research/sequencing/grch38/vcf/hiseqx/wgs_pcr_free/40x/HG002.hiseqx.pcr-free.40x.deepvariant-v1.0.grch38.vcf.gz
    split_biallelics: true
    benchmark: HG002_v421
    variables:
      coverage: 40
      seqtech: Illumina
      variant_caller: "DeepVariant"
    corrections:
      fix_refcall_gt : true
  HG005_Hifi_DV:
    refset: GRCh37_test
    chr_prefix: ""
    src:
      url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh37/SupplementaryFiles/inputvcfsandbeds/HG005_GRCh37_1_22_PacBio_HiFi_DeepVariant.vcf.gz
    benchmark: HG005_v421
    variables:
      coverage: 40
      seqtech: "PacBio HiFi"
      variant_caller: "DeepVariant"
    corrections:
      fix_refcall_gt : true

# Unlabeled queries: These are like labeled queries (see immediately above)
# except that they don't have a benchmark key, and consequently don't have
# labels. This also precludes them from being used for model training.
unlabeled_queries:
  Clinvar:
    refset: GRCh38_test
    src:
      url: https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/archive_2.0/2022/clinvar_20220812.vcf.gz
    chr_prefix: '' # isn't genomics wonderful?
    # NOTE: Clinvar has a wonky header which will make bcftools choke. This
    # shouldn't be necessary anyway
    split_biallelics: false
    # don't include any of these fields since they are not defined in clinvar
    format_fields:
      VAF: null
      DP: null
      GT: null
      GQ: null

# Model run specification. Each key represents a particular modul configuration.
# More deeply nested keys encode the inputs (which utilize the data in the
# previous sections) for each individual model run.
models:
  # Each key should be unique and briefly describe the intent of the model
  # configuration.
  test_model:
    # A list of keys from either 'labeled_queries' or 'unlabeled_queries'
    # above which will be used for training (and testing using holdout)
    train: [HG002_Hifi_DV, HG002_Illumina_DV]

    # Test = an input combination (given a training input combination) to
    # test a given model specification.
    test:
      # Each key should uniquely describe the testing data being used
      Clinvar_Illumina:
        # A key corresponding to one entry in 'unlabeld_queries' above
        query_key: Clinvar

        # A set of variables to use for this testing input. Any variables
        # previously specified in the 'unlabeled_queries' section will be
        # overriden. In this example, we are telling the model to regard
        # this vcf "as if" it had been collected with 40x Illumina
        # and called with DeepVariant (since it is a ClinVar vcf none of
        # these things are actually true, but here we could test what the
        # model predicts for this set of variants if they hypothetically
        # were produced under these conditions)
        #
        # Default: {}
        variables:
          coverage: 40
          seqtech: "Illumina"
          variant_caller: "DeepVariant"

      HG005_Hifi_DV:
        query_key: HG005_Hifi_DV

    # The type of variant to include. The only valid members are 'SNV' and
    # 'INDEL' and this list must not be empty
    vartypes: [SNV, INDEL]

    # The labels to be regarded as the negative class. Usually this will either
    # be 'fp' (false positives) or 'fn' (false negatives). However, one can
    # combine these into one meta-error by specifying both. In all cases, the
    # positive class is 'tp' (true positives).
    error_labels: [fp]

    # Whether to regard filtered variants as candidate variant or not. If false,
    # only variants with PASS as its filter result will be included in the
    # model input. Otherwise, non-passing variants are also included.
    filtered_are_candidates: false

    # How the EBM model should be trained
    # ebm_settings:

      # How the training data should be split when traning/testing
      # split_parameters:
        # The fraction of holdout data used for testing (a float b/t 0 and 1)
        # Default: 0.2 (20%)
        # test_size: 0.2

        # The random seed for splitting. This defaults to a random value.
        # Supply your own value to fix the splitting process.
        # random_seed: 2112

      # Parameters for the EBM classifier. Defaults are usually fine for
      # first pass model training. For more information, consult the EBM
      # documentation here: https://interpret.ml/docs/getting-started
      # classifier_parameters
        # max_bins: 256
        # max_interaction_bins: 32
        # binning: "quantile"
        # outer_bags: 8
        # inner_bags: 0
        # learning_rate: 0.01
        # validation_size: 0.15
        # early_stopping_rounds: 50
        # early_stopping_tolerance: 0.0001
        # max_rounds: 5000
        # min_samples_leaf: 2
        # max_leaves: 3
        # random_state: <random>

      # Other parameters that affect the training process. These normally
      # don't need to be changed except in advanced cases.
      # misc_parameters:
        # Downsample the data to the indicated fraction. Might be useful for
        # ultra-large datasets where not all the data is desired. Set to
        # 'null' to disable.
        # downsample: null

    virtual_features:
      SINE:
        description: whether or not a variant is in a SINE (of any length)
        expression:
          if_:
            relation: '>'
            left: {column: REPMASK_SINE_length}
            right: {numeric: 0}
          then_: {const: {numeric: 1}}
          else_: {const: {numeric: 0}}
    
      LINE_DEC:
        description: the decade of the length of a LINE (if present)
        expression:
          function: log
          arg: REPMASK_LINE_length
    
      A_SINE_length:
        description: length of A homopolymers in SINEs
        expression:
          if_: {is_missing: VIRT_SINE}
          then_: {const: {column: HOMOPOL_A_length}}
          else_: {const: {numeric: 0}}
    
      A_NONSINE_length:
        description: length of A homopolymers not in SINEs
        expression:
          if_: {is_missing: VIRT_SINE}
          then_: {const: {numeric: 0}}
          else_: {const: {column: HOMOPOL_A_length}}

    # A list of features to include. This only covers 1st order features;
    # interactions are specified in the next section.
    features:

      # Each key in this section must correspond to a given feature supplied
      # either by a variable or a hardcoded feature in the pipeline.
      VAR_variant_caller:
        # The type of feature: either 'categorical' or 'continuous'. In
        # practice, the model is trained in the same way; this feature
        # primarily makes visualization more appropriate.
        #
        # Default: continuous
        feature_type: categorical

        # Value to use for missing values. In practice, missing values happen
        # whenever a genomic context feature does not intersect with a variant.
        # Example, many variants are not in homopolymers, so homopolymer length
        # in this case will be missing. For many cases, it makes sense to set
        # this value to 0, since the lower bound for many features is a positve
        # integer. For others, this may not apply. This does not affect model
        # training, as the only thing it understands is a matix of number ;)
        #
        # Default: 0
        # fill_na: 0

        # Alternative name for this feature. This can be useful for renaming
        # features after a transformation, when the default name may be
        # misleading (see below for several examples). Set to null to use
        # the default name, which is the key for this object.
        #
        # Default: null
        # alt_name: null

        # Transform for this feature. For now, only two are supported:
        #   log: natural log transform
        #   binary: binary transform, where 0 is 0 and anything else is 1
        #
        # Default: null
        # transform: null

        # How to visualize the feature in the output report. All values in
        # this section have defaults, so it need not be specified manually.
        # visualization:

          # How to truncate the visualization, which may be useful if the
          # feature has very extreme values. Has an upper and lower bound, which
          # may be any float so long as lower < upper. Each may be null to
          # set its limit as infinity.
          #
          # Default: {lower: null, upper: null}
          # truncate: {lower: null, upper: null}

          # The type of plot to use for visualization:
          #   step: a step plot (for continuous variables)
          #   bar: a bar graph (for either discrete numberic variables or
          #        categorical variables)
          # 
          # Default: step
          # plot_type: step

          # How to display missing values. If given, and value below this bound
          # will be considered "missing" and will be displayed as a separate
          # plot to the left of the main plot. Useful when "missingness" has a
          # specific meaning.
          #
          # Default: null
          # split_missing: null
        
      VCF_VAF: {}
      VCF_DP:
        visualization:
          plot_type: bar
          truncate: {lower: 0, upper: 100}
      VCF_indel_length:
        visualization:
          truncate: {lower: -50, upper: 50}

      HOMOPOL_A_length: &homopol_length
        visualization:
          plot_type: bar
          truncate: {lower: 0, upper: 50}
      HOMOPOL_T_length: *homopol_length
      HOMOPOL_G_length: *homopol_length
      HOMOPOL_C_length: *homopol_length
      HOMOPOL_A_imperfect_frac: &homopol_frac
        fill_na: -1
        visualization:
          split_missing: 0
      HOMOPOL_T_imperfect_frac: *homopol_frac
      HOMOPOL_G_imperfect_frac: *homopol_frac
      HOMOPOL_C_imperfect_frac: *homopol_frac

      TR_unit_size_max:
        visualization:
          plot_type: bar
          truncate: {lower: 0, upper: 50}
      TR_unit_copies_max:
        visualization:
          truncate: {lower: 0, upper: 50}
      TR_identity_min: {}
      TR_score_max: {}
      TR_percent_AT_median:
        fill_na: -1
        visualization:
          split_missing: 0

      REPMASK_LTR_length:
        transform: binary
        alt_name: REPMASK_LTR
        feature_type: categorical
      REPMASK_LINE_length: {}

      MAP_difficult_250bp:
        feature_type: categorical
      MAP_difficult_100bp:
        feature_type: categorical

      SEGDUP_size_max: {}
      SEGDUP_identity_mean: {}
      SEGDUP_count:
        visualization:
          plot_type: bar
          truncate: {upper: 50}

      VIRT_SINE:
        transform: binary
        feature_type: categorical

      VIRT_A_SINE_length:
        visualization:
          plot_type: bar
          truncate: {upper: 50}

      VIRT_A_NONSINE_length:
        visualization:
          plot_type: bar
          truncate: {upper: 50}

    # Interaction terms in the model. This may either be:
    # - a number (which represents the upper bound of interactions the model
    #   may include; the algorithm itself will determine which specific terms
    #   are included)
    # - list of either
    #   - a single feature name, which will produce all interactions between
    #     this feature and all other features
    #   - a dict like {f1: <feature1>, f2: <feature2>} which will create a
    #     single interaction b/t feature1 and feature2
    #
    # Default: 0
    interactions:
      - VAR_variant_caller
      - {f1: VCF_indel_length, f2: HOMOPOL_A_length}
      - {f1: VCF_indel_length, f2: HOMOPOL_T_length}
      - {f1: VCF_indel_length, f2: HOMOPOL_G_length}
      - {f1: VCF_indel_length, f2: HOMOPOL_C_length}

# Data specific to a reference fasta file, including benchmarks, feature context
# data, and other metadata.
references:
  # A unique key for this reference (which should probably correspond to the
  # the commonly used name for the reference.
  GRCh37:

    # The source for the reference itself. NOTE, this is an SDF as defined by
    # vcftools and not a fasta.
    sdf:
      # The location of the referenece
      src:
        url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/references/GRCh37/hs37d5.fa.gz

      # The prefix used for chromosomes in this sdf.
      chr_prefix: ""

      # If true, the src block refers to a FASTA file; else it refers to an
      # SDF file as defined by rtg-tools
      is_fasta: True

    # Any GIAB stratifications pertinant to this reference which will be used
    # for filtering out invalid variants
    strats:

      mhc: [{chrom: 6, start: 28477797, end: 33448354}]

    # Data used for feature generation.
    feature_data:

      # Data used for creating difficult-to-map features. These are actually
      # GIAB stratification files.
      mappability:

        # Low stringency mappability file
        low:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh37/mappability/GRCh37_lowmappabilityall.bed.gz
          params:
            chr_prefix: ""

        # High stringency mappability file
        high:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh37/mappability/GRCh37_nonunique_l250_m0_e0.bed.gz
          params:
            chr_prefix: ""

      # Data used for creating the segmental duplications features. Assumes file
      # from the UCSC superdups database
      segdups:
        src:
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/genomicSuperDups.txt.gz
        params:
          bed_cols: {chrom: 1, start: 2, end: 3}
        other_cols:
          align_L: 18
          frac_match_indel: 27

      # Data used for making tandem repeats feaures. Expects a UCSC simple
      # repeats-like database file
      tandem_repeats:
        src:
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/simpleRepeat.txt.gz
        params:
          bed_cols: {chrom: 1, start: 2, end: 3}

      # Data used for making transposable element features. Expects a repeat-masker
      # output file.
      repeat_masker:
        src:
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/rmsk.txt.gz
        params:
          bed_cols: {chrom: 5, start: 6, end: 7}
        class_families:
          SINE: []
          LINE: [L1, L2, CR1, RTE-BovB, Dong-R4]
          LTR: []
          Satellite: []

    # A list of valid benchmarks
    benchmarks:
      # Unique key for this benchmark
      HG002_v421:

        # where to obtain the vcf
        vcf:
          src: 
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/NISTv4.2.1/GRCh37/HG002_GRCh37_1_22_v4.2.1_benchmark.vcf.gz
          chr_prefix: ""
          split_biallelics: true

        # where to obtain the bed file
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/NISTv4.2.1/GRCh37/HG002_GRCh37_1_22_v4.2.1_benchmark_noinconsistent.bed
          params:
            chr_prefix: ""

      HG003_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG003_NA24149_father/NISTv4.2.1/GRCh37/HG003_GRCh37_1_22_v4.2.1_benchmark.vcf.gz
          chr_prefix: ""
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG003_NA24149_father/NISTv4.2.1/GRCh37/HG003_GRCh37_1_22_v4.2.1_benchmark_noinconsistent.bed
          params:
            chr_prefix: ""
      HG004_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG004_NA24143_mother/NISTv4.2.1/GRCh37/HG004_GRCh37_1_22_v4.2.1_benchmark.vcf.gz
          chr_prefix: ""
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG004_NA24143_mother/NISTv4.2.1/GRCh37/HG004_GRCh37_1_22_v4.2.1_benchmark_noinconsistent.bed
          params:
            chr_prefix: ""
      HG005_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh37/HG005_GRCh37_1_22_v4.2.1_benchmark.vcf.gz
          chr_prefix: ""
          corrections:
            # this particular vcf will make vcfeval choke if we don't strip this field
            strip_format_fields: [IPS]
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh37/HG005_GRCh37_1_22_v4.2.1_benchmark.bed
          params:
            chr_prefix: ""
      HG006_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG006_NA24694_father/NISTv4.2.1/GRCh37/HG006_GRCh37_1_22_v4.2.1_benchmark.vcf.gz
          chr_prefix: ""
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG006_NA24694_father/NISTv4.2.1/GRCh37/HG006_GRCh37_1_22_v4.2.1_benchmark.bed
          params:
            chr_prefix: ""
      HG007_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG007_NA24695_mother/NISTv4.2.1/GRCh37/HG007_GRCh37_1_22_v4.2.1_benchmark.vcf.gz
          chr_prefix: ""
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG007_NA24695_mother/NISTv4.2.1/GRCh37/HG007_GRCh37_1_22_v4.2.1_benchmark.bed
          params:
            chr_prefix: ""

  GRCh38:
    sdf:
      src:
        url: https://s3.amazonaws.com/rtg-datasets/references/GRCh38.sdf.zip
      chr_prefix: chr
      is_fasta: False
    strats:
      mhc: [{chrom: 6, start: 28510020, end: 33480577}]
    feature_data:
      mappability:
        low:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh38/mappability/GRCh38_lowmappabilityall.bed.gz
        high:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/genome-stratifications/v3.0/GRCh38/mappability/GRCh38_nonunique_l250_m0_e0.bed.gz
      segdups:
        src:
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/genomicSuperDups.txt.gz
        params:
          bed_cols: {chrom: 1, start: 2, end: 3}
      tandem_repeats:
        src:
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/simpleRepeat.txt.gz
        params:
          bed_cols: {chrom: 1, start: 2, end: 3}
      repeat_masker:
        src:
          url: https://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/rmsk.txt.gz
        params:
          bed_cols: {chrom: 5, start: 6, end: 7}
        class_families:
          SINE: []
          LINE: [L1, L2, CR1, RTE-BovB, Dong-R4]
          LTR: []
          Satellite: []
    benchmarks:
      HG002_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/NISTv4.2.1/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG002_NA24385_son/NISTv4.2.1/GRCh38/HG002_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed
      HG003_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG003_NA24149_father/NISTv4.2.1/GRCh38/HG003_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG003_NA24149_father/NISTv4.2.1/GRCh38/HG003_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed
      HG004_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG004_NA24143_mother/NISTv4.2.1/GRCh38/HG004_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/AshkenazimTrio/HG004_NA24143_mother/NISTv4.2.1/GRCh38/HG004_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed
      HG005_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh38/HG005_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
          corrections:
            # this particular vcf will make vcfeval choke if we don't strip this field
            strip_format_fields: [IPS]
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG005_NA24631_son/NISTv4.2.1/GRCh38/HG005_GRCh38_1_22_v4.2.1_benchmark.bed
      HG006_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG006_NA24694_father/NISTv4.2.1/GRCh38/HG006_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG006_NA24694_father/NISTv4.2.1/GRCh38/HG006_GRCh38_1_22_v4.2.1_benchmark.bed
      HG007_v421:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG007_NA24695_mother/NISTv4.2.1/GRCh38/HG007_GRCh38_1_22_v4.2.1_benchmark.vcf.gz
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/release/ChineseTrio/HG007_NA24695_mother/NISTv4.2.1/GRCh38/HG007_GRCh38_1_22_v4.2.1_benchmark.bed
      draft_v005:
        vcf:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/T2T-HG002-XY-v2.7/20220324_v0.005_HG002XYvsGRCh38/preliminary-draft-small-variant-benchmark-files/GRCh38_T2T-XY-v2.7_dipcall-z2k.vcf.gz
        bed:
          src:
            url: https://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/AshkenazimTrio/analysis/T2T-HG002-XY-v2.7/20220324_v0.005_HG002XYvsGRCh38/preliminary-draft-small-variant-benchmark-files/GRCh38_T2T-XY-v2.7_dipcall-z2k.excluded.bed

# Definitions for features (in addition to what can be derived from other
# parts of the configuration)
feature_definitions:

  # Custom features to be added to each query vcf. This will only define the
  # permitted features to be added; they are actually added to each query
  # individually in their own configuration blocks.
  variables:

    # Continuous variables that can be added. Each key is the variable name
    # and the block under the key defines the properties of the variable (here
    # is one variable "coverage" with a lower limit of 1). Any variable
    # specified for a query file that violates these properties will trigger
    # an error.
    continuous:
      coverage:
        # the lower limit of the variable (if any)
        # Default: null
        lower: 1

        # the upper limit of the variable (if any)
        # Default: null
        # upper: null

        # Thd description for this variable (if any)
        # Default: null
        # description: null

    # Categorical variables to be added (analogous to continuous above)
    categorical:
      seqtech:
        # The levels this variable may take. Must be a non-empty list.
        levels: ["PacBio HiFi", "Illumina"]

        # Analogous description field.
        description: Sequencing tech used to produce the reads for the VCF file

      variant_caller:
        levels: ["DeepVariant"]
        description: Variant caller used to produce the reads for the VCF file

# Directories for build targets
# paths:
#
#   Directory for downloaded source files
#   Default: "resources"
#
#   resources: "resources"
#
#   Directory for any processed output files (eg everything that isn't "downloaded")
#   Default: "results"
#
#   results: "results"
#
#   Directory for log files (this will be a subdirectory under "results" above)
#   Default: "log"
#
#   log: "log"
