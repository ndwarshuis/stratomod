from functools import partial
from pathlib import Path
from snakemake.utils import min_version, validate
import scripts.python.common.config as cfg


min_version("7.20")


configfile: "config/static.yml"


sys.path.extend(["./workflow/scripts/python"])
from common.config import StratoMod

config = StratoMod.parse_obj(config)

################################################################################
# Wildcards


include: "rules/wildcards.smk"


################################################################################
# Paths

# conf_paths = config.paths
# resources_dir = conf_paths.resources
# results_dir = conf_paths.results
# log_dir = results_dir / "log"
# log_refset_dir = log_dir / cfg.all_wildcards["refset_key"]
# scripts_root = Path("workflow/scripts")


# # TODO this shouldn't be necessary
# # this is necessary as envs/scripts are apparently resolved locally in each rule
# # file
# def build_abs_path(relpath, basename):
#     return str(relpath.resolve() / basename)


# envs_path = partial(build_abs_path, Path("workflow/envs"))
# python_path = partial(build_abs_path, scripts_root / "python")
# rmd_path = partial(build_abs_path, scripts_root / "rmarkdown")


################################################################################
# Import Subworkflows


include: "rules/inputs.smk"
include: "rules/annotations/main.smk"
include: "rules/train_ebm.smk"


################################################################################
# Main Target


rule all:
    input:
        rules.all_summary.input,
        rules.all_ebm.input,


################################################################################
# Testing Targets


rule all_resources:
    input:
        # query vcfs
        expand(
            rules.download_labeled_query_vcf.output,
            l_query_key=[*config.all_labeled_querykeys],
        ),
        expand(
            rules.download_unlabeled_query_vcf.output,
            ul_query_key=[*config.all_unlabeled_querykeys],
        ),
        # benchmark vcfs/beds
        config.bench_targets(
            [
                *rules.download_bench_vcf.output,
                *rules.download_bench_bed.output,
            ],
        ),
        # reference and reference-dependent annotation files
        expand(
            [
                *rules.download_ref_sdf.output,
                *rules.download_genome.output,
                *rules.download_mappability_high.output,
                *rules.download_mappability_low.output,
                *rules.download_repeat_masker.output,
                *rules.download_superdups.output,
                *rules.download_tandem_repeats.output,
            ],
            ref_key=config.all_refkeys,
        ),
